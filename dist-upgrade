#!/usr/bin/env bash
# Update system via apt/apt-get. 
# Then do some cleanup.
# GPL v3
# Last update: 1/10/2018

set -euo pipefail

# Define colors. Because pretty.
RED=$'\e[1;31m'
GREEN=$'\e[1;32m'
YELLOW=$'\e[1;33m'
BLUE=$'\e[1;34m'
MAGENTA=$'\e[1;35m'
CYAN=$'\e[1;36m'
NC=$'\e[0m'

# Check if we are root/sudo.
if [[ $EUID -ne 0 ]]; then
   printf "${RED}I am not root. Trying to fix...${NC}\n" 1>&2
   sudo "$0" "$@"
   exit $?
else
 printf "${GREEN}I am root. Running...${NC}\n"
fi

# Reboot after updates if command line option set.
# If no args given, script will finish normally.
REBOOT=0
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -r|--reboot)
    REBOOT=1
    printf "\n${CYAN}Reboot called. Will force reboot after updates.${NC}\n\n"
    shift # past argument
    ;;
    *)
    printf "\nUnknown option\n\n" # unknown option
    printf "Abandon ship!\n\n\n"
    exit 1
    ;;
esac
shift # past argument or value
done



# Check if we have apt and set it's path.
# It's ugly.
PROG=0
if command -v apt; then
 PROG=$(command -v apt)
 printf "${GREEN}apt found at $PROG${NC}\n"
else
 PROG=1
 printf "${RED}apt not found${NC}\n"
fi

# Check for apt-get and set it's path.
# It's ugly.
APTGET=0
if command -v apt-get; then
 APTGET=$(command -v apt-get)
 printf "${GREEN}apt-get found at $APTGET${NC}\n"
else
 APTGET=1
 printf "${RED}apt-get not found${NC}\n"
fi

# Check if paths got set.
if [ "$PROG" = "1" ] && [ "$APTGET" = "1" ]; then
 printf "\n${RED}Neither apt nor apt-get found. Bail!${NC}\n"
 exit 1
fi


# Start doing updates
printf "\n${GREEN}Checking for updates${NC}\n"
if [ "$PROG" != "1" ]; then
 $PROG update
else
 $APTGET update
fi

if [ "$?" = "0" ]; then
 UPDATE="Update complete"
 UPDATESTATUS=0
else
 UPDATE="Update failed"
 UPDATESTATUS=1
fi

if hostname | grep -iq unifi; then
    printf "\n${GREEN}Looks like the UniFi system. Setting special bits.${NC}\n"
    echo "unifi unifi/has_backup boolean true" | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive
else
    printf "\n${YELLOW}Does not appear to be the UniFi system. Ok.${NC}\n"
fi


# Start doing upgrades
if [ "$UPDATESTATUS" = "0" ]; then
 printf "\n${GREEN}Running upgrade process${NC}\n"
 if [ "$PROG" != "1" ];then
  $PROG -y full-upgrade
 else
  $APTGET -y dist-upgrade
 fi
 if [ "$?" = "0" ]; then
  UPGRADE="Upgrade complete"
  UPGRADESTATUS=0
 else
  UPGRADE="Upgrade failed"
  UPGRADESTATUS=1
 fi
else
 printf "\n${RED}Doesn't look like updates completed.${NC}\n"
fi


# Start autoremove
if [ "$UPGRADESTATUS" = "0" ] && [ "$APTGET" != "1" ]; then
 printf "\n${GREEN}Auto removing any unneeded packages.${NC}\n"
 AUTOREMOVE=""
 $APTGET --purge -y autoremove
 if [ "$?" = "0" ]; then
  AUTOREMOVE="Auto remove complete"
 else
  AUTOREMOVE="Auto remove failed"
 fi
else
 AUTOREMOVE="Auto remove did not run."
 printf "\n${RED}Auto remove did not run. Either upgrades failed or we don't have apt-get.${NC}\n"
fi


# Start apt/apt-get cleanup.
if [ "$UPGRADESTATUS" = "0" ] && [ "$APTGET" != "1" ]; then
 printf "\n${GREEN}Running cleanup${NC}\n"
 CLEANUP=""
 $APTGET clean
 CLEANUP="Clean ran."
 if [ "$?" = "0" ]; then
  $APTGET autoclean
  CLEANUP="Clean and autoclean ran."
 fi
else
 CLEANUP="Cleanup did not run."
 printf "\n${RED}Cleanup did not run. Either upgrades failed or we don't have apt-get.${NC}\n"
fi


# We collected variables!
# Lets print them since so much may have scrolled by.
printf "\n\n"
printf "${CYAN}$UPDATE${NC}\n"
printf "${CYAN}$UPGRADE${NC}\n"
printf "${CYAN}$AUTOREMOVE${NC}\n"
printf "${CYAN}$CLEANUP${NC}\n"
printf "${NC}\n\n"

if [ "$REBOOT" = "1" ]; then
 printf "\n\n${CYAN}Reboot called. Let's do this!${NC}\n\n"
 sync
 sleep 5
 reboot -f
fi

